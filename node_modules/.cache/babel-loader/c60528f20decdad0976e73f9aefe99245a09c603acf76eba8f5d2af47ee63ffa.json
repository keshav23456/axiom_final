{"ast":null,"code":"var _jsxFileName = \"/Users/keshav/Downloads/fuck yes/src/components/ParticleBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleBackground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // Set initial canvas dimensions\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n    const particlesArray = [];\n    const numberOfParticles = Math.min(70, Math.floor(dimensions.width * dimensions.height / 15000)); // Adaptive particle count\n\n    const mouse = {\n      x: null,\n      y: null,\n      radius: 150 // Larger interaction radius\n    };\n\n    // Update canvas size on window resize\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    window.addEventListener(\"resize\", handleResize);\n\n    // Track mouse movement\n    const handleMouseMove = event => {\n      mouse.x = event.x;\n      mouse.y = event.y;\n    };\n    window.addEventListener(\"mousemove\", handleMouseMove);\n\n    // Track touch movement for mobile\n    const handleTouchMove = event => {\n      if (event.touches[0]) {\n        mouse.x = event.touches[0].clientX;\n        mouse.y = event.touches[0].clientY;\n      }\n    };\n    window.addEventListener(\"touchmove\", handleTouchMove);\n\n    // Reset mouse position when not hovering\n    const handleMouseLeave = () => {\n      mouse.x = null;\n      mouse.y = null;\n    };\n    window.addEventListener(\"mouseleave\", handleMouseLeave);\n\n    // Particle class with enhanced features\n    class Particle {\n      constructor() {\n        // Random positioning\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n\n        // Random size with more variation\n        this.size = Math.random() * 3 + 1;\n\n        // Base speed that's slower for a more elegant effect\n        this.baseSpeedX = (Math.random() - 0.5) * 0.5;\n        this.baseSpeedY = (Math.random() - 0.5) * 0.5;\n\n        // Actual speed that will be modified\n        this.speedX = this.baseSpeedX;\n        this.speedY = this.baseSpeedY;\n\n        // Add properties for connecting lines\n        this.connectedTo = new Set();\n\n        // Color with slight variation in blue tones\n        this.color = `rgba(${0}, ${Math.floor(Math.random() * 50) + 150}, ${Math.floor(Math.random() * 50) + 200}, ${Math.random() * 0.3 + 0.7})`;\n      }\n\n      // Draw particle\n      draw() {\n        ctx.beginPath();\n\n        // Create gradient for particle\n        const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size);\n        gradient.addColorStop(0, this.color);\n        gradient.addColorStop(1, 'rgba(0, 100, 255, 0)');\n        ctx.fillStyle = gradient;\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n      // Update particle position and handle interactions\n      update(particles) {\n        // Reset connected particles\n        this.connectedTo.clear();\n\n        // Move particle\n        this.x += this.speedX;\n        this.y += this.speedY;\n\n        // Bounce off edges with damping\n        if (this.x > canvas.width || this.x < 0) {\n          this.speedX *= -0.9;\n        }\n        if (this.y > canvas.height || this.y < 0) {\n          this.speedY *= -0.9;\n        }\n\n        // Keep particles within bounds\n        this.x = Math.max(0, Math.min(canvas.width, this.x));\n        this.y = Math.max(0, Math.min(canvas.height, this.y));\n\n        // Mouse interaction\n        if (mouse.x !== null && mouse.y !== null) {\n          const dx = mouse.x - this.x;\n          const dy = mouse.y - this.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < mouse.radius) {\n            // Calculate force based on distance (stronger when closer)\n            const force = (mouse.radius - distance) / mouse.radius;\n            const angle = Math.atan2(dy, dx);\n\n            // Repulsion effect\n            const repulsionX = Math.cos(angle) * force * 1;\n            const repulsionY = Math.sin(angle) * force * 1;\n\n            // Apply repulsion\n            this.speedX -= repulsionX;\n            this.speedY -= repulsionY;\n\n            // Increase particle size temporarily when near mouse\n            this.size = Math.min(5, this.size + force * 0.5);\n          } else {\n            // Gradually return to original size\n            this.size = Math.max(this.size * 0.98, Math.random() * 3 + 1);\n          }\n        } else {\n          // Return to base speed when no mouse interaction\n          this.speedX = this.speedX * 0.98 + this.baseSpeedX * 0.02;\n          this.speedY = this.speedY * 0.98 + this.baseSpeedY * 0.02;\n\n          // Return to original size\n          this.size = Math.max(this.size * 0.98, Math.random() * 3 + 1);\n        }\n\n        // Gradually slow down (damping)\n        this.speedX *= 0.99;\n        this.speedY *= 0.99;\n\n        // Connect with nearby particles\n        this.connectParticles(particles);\n\n        // Draw the particle\n        this.draw();\n      }\n\n      // Connect with nearby particles\n      connectParticles(particles) {\n        for (let i = 0; i < particles.length; i++) {\n          const particle = particles[i];\n\n          // Skip if it's the same particle or already connected\n          if (this === particle || this.connectedTo.has(particle)) {\n            continue;\n          }\n\n          // Calculate distance\n          const dx = this.x - particle.x;\n          const dy = this.y - particle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          // Connect if within threshold (adjusted based on canvas size)\n          const connectionDistance = Math.min(150, canvas.width / 10);\n          if (distance < connectionDistance) {\n            // Mark as connected to avoid duplicate lines\n            this.connectedTo.add(particle);\n            particle.connectedTo.add(this);\n\n            // Calculate line opacity based on distance\n            const opacity = 1 - distance / connectionDistance;\n\n            // Draw connection line\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(0, 150, 255, ${opacity * 0.2})`;\n            ctx.lineWidth = Math.min(this.size, particle.size) * 0.3;\n            ctx.moveTo(this.x, this.y);\n            ctx.lineTo(particle.x, particle.y);\n            ctx.stroke();\n          }\n        }\n      }\n    }\n\n    // Initialize particles\n    const init = () => {\n      particlesArray.length = 0;\n      for (let i = 0; i < numberOfParticles; i++) {\n        particlesArray.push(new Particle());\n      }\n    };\n\n    // Animation loop\n    const animate = () => {\n      // Clear canvas with semi-transparent background for trail effect\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.05)\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Update all particles\n      particlesArray.forEach(particle => particle.update(particlesArray));\n\n      // Request next frame\n      requestAnimationFrame(animate);\n    };\n    init();\n    animate();\n\n    // Cleanup on component unmount\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"touchmove\", handleTouchMove);\n      window.removeEventListener(\"mouseleave\", handleMouseLeave);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [dimensions]); // Re-initialize when dimensions change\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      zIndex: -1,\n      backgroundColor: \"rgb(10, 10, 20)\" // Slightly blue-tinted dark background\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s(ParticleBackground, \"Zx1u+yBgxDAtRPU9aTihLz5++Ng=\");\n_c = ParticleBackground;\nexport default ParticleBackground;\nvar _c;\n$RefreshReg$(_c, \"ParticleBackground\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","ParticleBackground","_s","canvasRef","dimensions","setDimensions","width","window","innerWidth","height","innerHeight","canvas","current","ctx","getContext","particlesArray","numberOfParticles","Math","min","floor","mouse","x","y","radius","handleResize","addEventListener","handleMouseMove","event","handleTouchMove","touches","clientX","clientY","handleMouseLeave","Particle","constructor","random","size","baseSpeedX","baseSpeedY","speedX","speedY","connectedTo","Set","color","draw","beginPath","gradient","createRadialGradient","addColorStop","fillStyle","arc","PI","fill","update","particles","clear","max","dx","dy","distance","sqrt","force","angle","atan2","repulsionX","cos","repulsionY","sin","connectParticles","i","length","particle","has","connectionDistance","add","opacity","strokeStyle","lineWidth","moveTo","lineTo","stroke","init","push","animate","fillRect","forEach","requestAnimationFrame","removeEventListener","ref","style","position","top","left","zIndex","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/keshav/Downloads/fuck yes/src/components/ParticleBackground.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nconst ParticleBackground = () => {\n  const canvasRef = useRef(null);\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // Set initial canvas dimensions\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n\n    const particlesArray = [];\n    const numberOfParticles = Math.min(70, Math.floor(dimensions.width * dimensions.height / 15000)); // Adaptive particle count\n    \n    const mouse = {\n      x: null,\n      y: null,\n      radius: 150, // Larger interaction radius\n    };\n\n    // Update canvas size on window resize\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    \n    window.addEventListener(\"resize\", handleResize);\n\n    // Track mouse movement\n    const handleMouseMove = (event) => {\n      mouse.x = event.x;\n      mouse.y = event.y;\n    };\n    \n    window.addEventListener(\"mousemove\", handleMouseMove);\n\n    // Track touch movement for mobile\n    const handleTouchMove = (event) => {\n      if (event.touches[0]) {\n        mouse.x = event.touches[0].clientX;\n        mouse.y = event.touches[0].clientY;\n      }\n    };\n    \n    window.addEventListener(\"touchmove\", handleTouchMove);\n\n    // Reset mouse position when not hovering\n    const handleMouseLeave = () => {\n      mouse.x = null;\n      mouse.y = null;\n    };\n    \n    window.addEventListener(\"mouseleave\", handleMouseLeave);\n\n    // Particle class with enhanced features\n    class Particle {\n      constructor() {\n        // Random positioning\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        \n        // Random size with more variation\n        this.size = Math.random() * 3 + 1;\n        \n        // Base speed that's slower for a more elegant effect\n        this.baseSpeedX = (Math.random() - 0.5) * 0.5;\n        this.baseSpeedY = (Math.random() - 0.5) * 0.5;\n        \n        // Actual speed that will be modified\n        this.speedX = this.baseSpeedX;\n        this.speedY = this.baseSpeedY;\n        \n        // Add properties for connecting lines\n        this.connectedTo = new Set();\n        \n        // Color with slight variation in blue tones\n        this.color = `rgba(${0}, ${Math.floor(Math.random() * 50) + 150}, ${Math.floor(Math.random() * 50) + 200}, ${Math.random() * 0.3 + 0.7})`;\n      }\n\n      // Draw particle\n      draw() {\n        ctx.beginPath();\n        \n        // Create gradient for particle\n        const gradient = ctx.createRadialGradient(\n          this.x, this.y, 0,\n          this.x, this.y, this.size\n        );\n        \n        gradient.addColorStop(0, this.color);\n        gradient.addColorStop(1, 'rgba(0, 100, 255, 0)');\n        \n        ctx.fillStyle = gradient;\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n      // Update particle position and handle interactions\n      update(particles) {\n        // Reset connected particles\n        this.connectedTo.clear();\n        \n        // Move particle\n        this.x += this.speedX;\n        this.y += this.speedY;\n\n        // Bounce off edges with damping\n        if (this.x > canvas.width || this.x < 0) {\n          this.speedX *= -0.9;\n        }\n        if (this.y > canvas.height || this.y < 0) {\n          this.speedY *= -0.9;\n        }\n\n        // Keep particles within bounds\n        this.x = Math.max(0, Math.min(canvas.width, this.x));\n        this.y = Math.max(0, Math.min(canvas.height, this.y));\n\n        // Mouse interaction\n        if (mouse.x !== null && mouse.y !== null) {\n          const dx = mouse.x - this.x;\n          const dy = mouse.y - this.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < mouse.radius) {\n            // Calculate force based on distance (stronger when closer)\n            const force = (mouse.radius - distance) / mouse.radius;\n            const angle = Math.atan2(dy, dx);\n            \n            // Repulsion effect\n            const repulsionX = Math.cos(angle) * force * 1;\n            const repulsionY = Math.sin(angle) * force * 1;\n            \n            // Apply repulsion\n            this.speedX -= repulsionX;\n            this.speedY -= repulsionY;\n            \n            // Increase particle size temporarily when near mouse\n            this.size = Math.min(5, this.size + force * 0.5);\n          } else {\n            // Gradually return to original size\n            this.size = Math.max(this.size * 0.98, Math.random() * 3 + 1);\n          }\n        } else {\n          // Return to base speed when no mouse interaction\n          this.speedX = this.speedX * 0.98 + this.baseSpeedX * 0.02;\n          this.speedY = this.speedY * 0.98 + this.baseSpeedY * 0.02;\n          \n          // Return to original size\n          this.size = Math.max(this.size * 0.98, Math.random() * 3 + 1);\n        }\n\n        // Gradually slow down (damping)\n        this.speedX *= 0.99;\n        this.speedY *= 0.99;\n\n        // Connect with nearby particles\n        this.connectParticles(particles);\n        \n        // Draw the particle\n        this.draw();\n      }\n\n      // Connect with nearby particles\n      connectParticles(particles) {\n        for (let i = 0; i < particles.length; i++) {\n          const particle = particles[i];\n          \n          // Skip if it's the same particle or already connected\n          if (this === particle || this.connectedTo.has(particle)) {\n            continue;\n          }\n          \n          // Calculate distance\n          const dx = this.x - particle.x;\n          const dy = this.y - particle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          // Connect if within threshold (adjusted based on canvas size)\n          const connectionDistance = Math.min(150, canvas.width / 10);\n          if (distance < connectionDistance) {\n            // Mark as connected to avoid duplicate lines\n            this.connectedTo.add(particle);\n            particle.connectedTo.add(this);\n            \n            // Calculate line opacity based on distance\n            const opacity = 1 - distance / connectionDistance;\n            \n            // Draw connection line\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(0, 150, 255, ${opacity * 0.2})`;\n            ctx.lineWidth = Math.min(this.size, particle.size) * 0.3;\n            ctx.moveTo(this.x, this.y);\n            ctx.lineTo(particle.x, particle.y);\n            ctx.stroke();\n          }\n        }\n      }\n    }\n\n    // Initialize particles\n    const init = () => {\n      particlesArray.length = 0;\n      for (let i = 0; i < numberOfParticles; i++) {\n        particlesArray.push(new Particle());\n      }\n    };\n\n    // Animation loop\n    const animate = () => {\n      // Clear canvas with semi-transparent background for trail effect\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.05)\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Update all particles\n      particlesArray.forEach(particle => particle.update(particlesArray));\n      \n      // Request next frame\n      requestAnimationFrame(animate);\n    };\n\n    init();\n    animate();\n\n    // Cleanup on component unmount\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"touchmove\", handleTouchMove);\n      window.removeEventListener(\"mouseleave\", handleMouseLeave);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [dimensions]); // Re-initialize when dimensions change\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: -1,\n        backgroundColor: \"rgb(10, 10, 20)\", // Slightly blue-tinted dark background\n      }}\n    />\n  );\n};\n\nexport default ParticleBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}